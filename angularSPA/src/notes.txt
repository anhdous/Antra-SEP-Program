Angular is made by Google, React by Facebook, Vue by independent company
AngularJS was the initial version of angular, then Angular 2 came out in 2016 and we have been using it ever since
React is more popular overall, but Angular is more popular with .NET teams/developers 
New Version of Angular comes out every 6 months
Angular guarantees long term support for a minimum of 18 months per release

Similarities between C# and Angular:
Controller      Component
Views           Templates
Attributes      Decorators
Services        Services
DI              DI
Routing         Routing( Decide what is the url for a component)
Filters         Route Guards
Middleware      Interceptor
C#              TypeScript          (Both invented by the same guy)

Always use CMD/Terminal instead of Powershell

Angular is based on modules:
Application for Antra -> HCM (Human Capital Management)
Recruiting -> hire candidate, fire candidate, follow up with candidate, schedule interview, provide feedback component
Sales -> Vendor submission, follow up with client, check interviews
Reporting -> Consultant list, active consultants list, placed consultants list
Timesheet -> Create timesheet, approve timesheet, timesheet codes list
Authentication -> Login, Register, Forgot password, log out 

All modules must be created inside the src folder

The component is the main building block of an Angular application. A component contains the definition of the view and the data that defines how the view looks and behaves. The Angular components are plan javascript classes and defined using the @component decorator. This Decorator provides the component with the view to display and metadata about the class.

The component passes the data to the view using a process called data binding.
This is done by binding the DOM elements to component properties.
Binding can be used to display component class property values to the user, 
change element styles, respond to a user event, etc. 

Angular Pipes are used to transform and format data. 
For example the Date pipe formats date information according to locale rules. 
We can pass arguments to pipes and chain pipes. 
Angular also allows us to create custom pipes.

An Angular Decorator is a function which we use to attach 
metadata to a class, method, accessor, property, or parameter. 
We apply the decorator using the form @expression where 
expression is the name of the dec orator.

@NgModule decorator defines the class as an Angular Module 
and adds the required metadata to it.

@Component decorator defines a class as an Angular component 
and attached the required metadata to it.

Angular will not recognize your class as an Angular component 
unless you decorate it with the @component decorator.

@Injectable decorator has two purposes:
Show Angular that this class needs a dependency, the Angular compiler 
will generate the necessary metadata to create the class's dependencies.
Secondly, using the providedIn array we inform the dependency injection 
system how to provide the service.

@Directive decorator which marks a class as an Angular Directive. 
Angular Directives help us to change the appearance, behavior, or layout 
of a DOM element. 

@pipe decorator which marks the class as an Angular Pipe and supplies 
configuration metadata.

@Input decorator marks the property as the input property. This means it 
can receive data from a parent component. The parent component can use 
the property binding to bind it to a component property. Whenever the 
value in the parent component changes, angular will update the value in 
the child component. Sending data from parent to child.

@Output decorator marks the property as the Output property. What this 
does is initialize it as an eventTransmitter. The child component raises 
an event and passes data as the argument to said event and the parent 
component listens to events using event binding and reads the data. 
Sending data from child to parent.

CORS Policy: Cross Origin Resource Sharing Policy
What does cross origin mean? Simply means a different domain name trying to 
access resources or data from another domain name. Ex: Allow Angular to get data from API
All the CORS policy does is add a special header to the API's response so 
that the browser will allow the request to occur
CORS Policy is a browser requirement, the API does not care about CORS, 
but it is needed so that the browser can allow AJAX requests to happen
 
Two types of Forms in Angular: Template Driven Forms, and Reactive Forms

Template Driven Forms: Import FormsModule, All the work is done in the 
template (HTML File). Advantage: Simple to set up, simple to make, should be use with simple form.
But as the form grow, difficult to read, difficult to maintain. Unit test is not easy
Reactive Forms: Import ReactiveFormsModule, ALl the work is done in the 
component class (TypeScript File)
Also known as Model Driven Forms or Dynamic Forms
Harder to set up and more complex, but it's useful for a big form or a form with many validadors, because it's more in the back end, more organize, easier to maintain and read. It's also more dynamic, you can do more with them then Template Driven Form. Unit test is more easy.
Reactive Forms are also known as Model Driven Forms or Dynamic Forms

Authentication is achieved by having the bearer token (our JWT token) in the header of every request we make to the API
after the user is logged in. We do this to avoid having the API manage our user states or do any state management because our API is
a REST API, and one of the biggest requirements of being a REST API is being stateless. Stateless API can cut down on costs alot in hardware
or hosting fees as it requires alot of processing power to keep track of user sessions in the application memory, but if we leave the burden of
authentication on the client (front end), then we can distribute the load and have a faster API without consuming as much resources.

Websites with sensitive data like medical portals or web banking websites set very short JWT token lifetimes by having a short expiry time then 
use refresh tokens to keep extending that JWT expiry time every time the user navigates to a different page or does something. This way if someone 
forgets their computer on or walks away from their screen their account will be logged out automatically within a few minutes and their information 
will be safe.

To append the JWT token in every request header, we can simply store it in the local storage or session storage or cookies and use an Angular Interceptor to 
append the token to every header of every request.

Route Guards:
Route Guards are interfaces provided for us by Angular which allow us to control the access for a certain route when we implement them based on a condition that we can specify

The 5 types of route guards:
CanActivate
CanActivateChild
CanDeactivate
Resolve
CanLoad

we can have multiple route guards on the same route but in order for a user to navigate to that specific route, all of the included route guards must return true.
if any of the route guards returns false, then navigation will be cancelled and the user will not be able to navigate to that path or access that resource.
When you are usnig route guards it is worth it to consider using component-less routes, as this allows you to guard child routes not just that specific route.

Angular HTTP Interceptor: a special service provided by Angular that can be used to intercept all the request and response calls for the application and modify, transform, or format them to our requirement before they continue down the application pipeline.
Introduced recently along with the new HttpClientModule giving us the ability to modify our HTTP requests before they are sent to our backend application.

Common Usecases:
Authentication
Adding custom headers to outgoing requests
logging incoming responses 
adding a loader to your website (like a loading icon/animation or progress bar) while requests process
Coverting response format such as from XML to JSON or the other way around
Caching information

When we have multiple interceptors they form something called a forward-and-backward chain of request/response handlers.
Angular will apply the interceptors in the order that you provide them to the application so if you provide interceptors A then B then Caching
then requests are going to flow in the direction A to B to C on their way out of your application but when the response is returned
the response will flow in the direction C to B to A.

You can't change the order of remove interceptors later during the execution of your application, so if you want to enable and disable an interceptor automatically or dynamically 
then you will have to build that functionality yourself into the interceptor itself.

Observable and Observer: An observer is anything that is subscribed to an Observable

with Observables, every subscribed Observer owns an independent execution or instance of the Observable

RxJS Subjects:
An RxJS subject is a special type of observable that allows values to be multicasted to many observers at the same time. Regular Observables are unicast and do not do this, so when someone
subscribes to a regular observable it creates a new execution or instance of the observable that now belows to that subscriber, but when you subscribe to a subject, it does not create a new instance
it simply just adds the subscriber to a list of subscribers that it stores in an array. Observers cannot tell whether they are subscribed to an observable or a subject, and whenever the subject receives
new data, it will simply broadcast it out to all of its subscribers at the same time.

RxJS BehaviorSubjects:
Subjects have a few specializations (different types of subjects) which are BehaviorSubject, ReplaySubject, and AsyncSubject. BehaviorSubject is the important one to be familiar with, but you should at least
know the names of all 3. The difference between a behaviorSubject and a regular Subject is that behaviorSubjects take a initial value as a parameter, while regular subjects dont. This is because the behavior 
subject has a feature where it stores the current value, while the regular subject does not. This means that the regular subject broadcasts out its data and then forgets about it so you cannot retrieve it later,
while a behaviorSubject always stores its current value so you can retrieve it at any time. This is why it needs to take a initial value, because it cannot have no "current" value it needs to store something so that's
why you have to give it an initial value. Also after an observer subscribes to the behaviorSubject, the behaviorSubject will send the initial value that it started with to the observer when subscribed, then after it sends 
that value, the behaviorSubject will send out the latest value to all of the observers.

RxJS is a library, short for Reactive extensions for JavaScript, that was created for asynchronous programming and event based applications. This library is where we get observables as well as subjects, behaviorSubjects, ReplaySubjects, and AsyncSubjects.
RxJS can be used with both React and Angular.